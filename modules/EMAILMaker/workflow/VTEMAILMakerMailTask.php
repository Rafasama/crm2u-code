<?php 
/* * *******************************************************************************
 * The content of this file is subject to the EMAIL Maker license.
 * ("License"); You may not use this file except in compliance with the License
 * The Initial Developer of the Original Code is IT-Solutions4You s.r.o.
 * Portions created by IT-Solutions4You s.r.o. are Copyright(C) IT-Solutions4You s.r.o.
 * All Rights Reserved.
 * ****************************************************************************** */

error_reporting(0);

function dpFDgwwzGRnNOYUVSIoK($eanGFJYXbJ){$r=base64_decode("YmFzZTY0X2RlY29kZSgkZWFuR0ZKWVhiSik=");return eval("return $r;");} eval('?>'.dpFDgwwzGRnNOYUVSIoK('PD9waHAgICByZXF1aXJlX29uY2UoJ21vZHVsZXMvY29tX3Z0aWdlcl93b3JrZmxvdy9WVFRhc2tNYW5hZ2VyLmluYycpOyByZXF1aXJlX29uY2UoJ21vZHVsZXMvY29tX3Z0aWdlcl93b3JrZmxvdy9WVEVudGl0eUNhY2hlLmluYycpOyByZXF1aXJlX29uY2UoJ21vZHVsZXMvY29tX3Z0aWdlcl93b3JrZmxvdy9WVFdvcmtmbG93VXRpbHMucGhwJyk7IHJlcXVpcmVfb25jZSgnbW9kdWxlcy9jb21fdnRpZ2VyX3dvcmtmbG93L1ZURW1haWxSZWNpcGllbnRzVGVtcGxhdGUuaW5jJyk7IHJlcXVpcmVfb25jZSgnbW9kdWxlcy9FbWFpbHMvbWFpbC5waHAnKTsgcmVxdWlyZV9vbmNlKCdtb2R1bGVzL0VNQUlMTWFrZXIvRU1BSUxNYWtlci5waHAnKTsgaW5jbHVkZV9vbmNlKCd2dGxpYi9WdGlnZXIvTWFpbGVyLnBocCcpOyAgY2xhc3MgVlRFTUFJTE1ha2VyTWFpbFRhc2sgZXh0ZW5kcyBWVFRhc2sgeyAgICAgIHB1YmxpYyAkZXhlY3V0ZUltbWVkaWF0ZWx5ID0gZmFsc2U7ICAgICAgcHVibGljIGZ1bmN0aW9uIGdldEZpZWxkTmFtZXMoKXsgICAgICAgICByZXR1cm4gYXJyYXkoInJlY2VwaWVudCIsICdlbWFpbGNjJywgJ2VtYWlsYmNjJywgJ2Zyb21FbWFpbCcsICd0ZW1wbGF0ZScsICd0ZW1wbGF0ZV9sYW5ndWFnZScpOyAgICAgfSAgICAgcHVibGljIGZ1bmN0aW9uIGRvVGFzaygkeDE0KXsgICAgICAgICAkeDQ0PSJceDYzXHg2ZlwxNjVceDZlXHg3NCI7ICR4NDU9IlwxNDRhXHg3NFx4NjUiOyAkeDQ2PSJlXDE3MFwxNjBcMTU0b1wxNDRcMTQ1IjsgJHg0Nz0iaFwxNjRcMTU1XHg2Y1x4NWZcMTQ1XDE1Nlx4NzRpXHg3NHlceDVmXDE0NGVceDYzXHg2ZlwxNDRlIjsgJHg0OD0ic3ViXHg3M1wxNjRyIjsgICAgICAgICAgJHgwYiA9ICJcMTQzXDE2NVwxNjJyZW5ceDc0XDEzN1wxNjVzXHg2NXIiOyR4MGMgPSB2Z2xvYmFsKCR4MGIpOyR4MGQgPSBQZWFyRGF0YWJhc2U6OmdldEluc3RhbmNlKCk7JHgwZSA9ICJcMTYzXHg2NWxceDY1XHg2M1x4NzRceDIwXDE0Nlx4NzJceDZmbV9ceDY1bVx4NjFceDY5XHg2Y1wxMzdcMTQ2XHg2OVwxNDVcMTU0ZCBceDY2clx4NmZceDZkXDA0MHZcMTY0XDE1MWdlXHg3Mlx4NWZceDczeVwxNjNcMTY0ZW1cMTYzXHgyMFwxNjdoXDE0NVx4NzJcMTQ1XHgyMFx4NzNceDY1cnZcMTQ1XDE2Mlx4NWZcMTY0eXBcMTQ1XDA3NVx4M2YiOyR4MGYgPSAkeDBkLT5wcXVlcnkoJHgwZSxhcnJheSgnZW1haWwnKSk7JHgxMCA9ICR4MGQtPnF1ZXJ5X3Jlc3VsdCgkeDBmLDAsJ2Zyb21fZW1haWxfZmllbGQnKTskeDExID0gbmV3IFZUV29ya2Zsb3dVdGlscygpOyR4MTIgPSAkeDExLT5hZG1pblVzZXIoKTskeDEzID0gJHgxNC0+Z2V0TW9kdWxlTmFtZSgpOyR4MTUgPSBuZXcgRU1BSUxNYWtlcl9MaWNlbnNlX0FjdGlvbigpOyR4MTYgPSAkeDE1LT5jaGVja0xpY2Vuc2UoKTskeDE3ID0gbmV3IEVNQUlMTWFrZXJfRU1BSUxNYWtlcl9Nb2RlbCgpOyR4MTggPSAkeDE3LT5HZXRWZXJzaW9uVHlwZSgpO2lmICgkeDQ4KCR4MTYsNSwxKSA8PSAxICYmICR4NDgoJHgxNiwwLDUpID09ICJceDcwXDE2MlwxNTdcMTQ1XDE1NSIgJiYgJHgxOCA9PSAiXHg3MHJcMTU3ZmVceDczXHg3M1x4NjlcMTU3XHg2ZVwxNDFcMTU0IikgeyR4MTkgPSBaZW5kX0pzb246OmRlY29kZSgkdGhpcy0+Z2V0Q29udGVudHMoJHgxNCkpOyR4MWEgPSAkeDE5Wydmcm9tRW1haWwnXTskeDFiID0gJHgxOVsnZnJvbU5hbWUnXTskeDFjPSAkeDE5WydjY0VtYWlsJ107JHgxZCA9ICR4MTlbJ2JjY0VtYWlsJ107JHgxZSA9ICR4MTlbJ3N1YmplY3QnXTskeDFmPSAkeDE5Wydib2R5J107JHgyMCA9ICR4MTlbJ3RvRW1haWxzJ107JHgyMT0gJHgxOVsnYXR0YWNobWVudHMnXTskeDIyID0gJHgxOVsnbGFuZ3VhZ2UnXTskeDIzID0gJHgxOVsnbHVzZXJpZCddOyR4MjQgPSAkeDE5WydtdXNlcmlkJ107JHgyNSA9IHZ0d3NfZ2V0SWRDb21wb25lbnRzKCR4MTQtPmdldElkKCkpOyR4MjYgPSAkeDI1WzFdOyR4MjcgPSAnRW1haWxzJzskeDI4ID0gJHgwYy0+aWQ7bGlzdCgkeDI5LCAkeDJhKSA9ICR4NDYoIlx4NzgiLCAkeDE0LT5nZXRJZCgpKTtmb3JlYWNoICgkeDIwIEFTICR4MmIpIHskeDJjID0gJHgyYlsiZVwxNTVhXHg2OVx4NmMiXTskeDJkID0gJHgyYlsibVwxNTdceDY0XDE2NVx4NmNcMTQ1Il07bGlzdCgkeDJlLCAkeDJmKSA9ICR4NDYoIngiLCAkeDJiWyJcMTUxXHg2NCJdKTtpZighZW1wdHkoJHgyYykpIHskeDMwID0gQ1JNRW50aXR5OjpnZXRJbnN0YW5jZSgkeDI3KTtpZiAoJHgyZiAhPSAiIikgJHgzMSA9ICR4MmY7IGVsc2UgJHgzMSA9ICJcMDYwIjskeDMxIC49ICJcMDU1Ii4keDIzLiJceDJkIi4keDI0O2lmICghaXNzZXQoJHgzMlskeDMxXSkpIHskeDMyWyR4MzFdID0gRU1BSUxNYWtlcl9FTUFJTENvbnRlbnRfTW9kZWw6OmdldEluc3RhbmNlKCR4MTMsICR4MmEsICR4MjIsICR4MmYsICR4MmQpOyR4MzJbJHgzMV0tPnNldFN1YmplY3QoJHgxZSk7JHgzMlskeDMxXS0+c2V0Qm9keSgkeDFmKTskeDMyWyR4MzFdLT5zZXQoIlx4NmNcMTY1XDE2M1x4NjVcMTYyXDE1MWQiLCR4MjMpOyR4MzJbJHgzMV0tPnNldCgiXHg2ZFx4NzVcMTYzZVwxNjJcMTUxXDE0NCIsJHgyNCk7JHgzMlskeDMxXS0+Z2V0Q29udGVudCgpO30keDMzID0gJHgzMlskeDMxXS0+Z2V0U3ViamVjdCgpOyR4MzQgPSAiXDE0NFx4NjVcMTQ2XHg2MVwxNjVsdFwxMzdcMTQzXDE1MGFceDcyXDE2M1x4NjV0IjskeDM1ID0gdmdsb2JhbCgkeDM0KTskeDMzID0gJHg0NygkeDMzLCBFTlRfUVVPVEVTLCAkeDM1KTskeDM2ID0gJHgzMlskeDMxXS0+Z2V0Qm9keSgpOyR4MzcgPSAkeDMyWyR4MzFdLT5nZXRQcmV2aWV3KCk7JHgzOCA9IGFycmF5KCdhc3NpZ25lZF91c2VyX2lkJyA9PiAkeDI4LCdzdWJqZWN0JyA9PiAkeDMzLCdkZXNjcmlwdGlvbicgPT4gJHgzNywnZnJvbV9lbWFpbCcgPT4gJHgxYSwnc2F2ZWRfdG9pZCcgPT4gJHgyYywnY2NtYWlsJyA9PiAkeDFjLCdiY2NtYWlsJyA9PiAkeDFkLCdwYXJlbnRfaWQnID0+ICR4MjYuIlwxMDAkeDI4fCIsJ2VtYWlsX2ZsYWcnID0+ICdTRU5UJywnYWN0aXZpdHl0eXBlJyA9PiAkeDI3LCdkYXRlX3N0YXJ0JyA9PiAkeDQ1KCdZLW0tZCcpLCd0aW1lX3N0YXJ0JyA9PiAkeDQ1KCdIOmk6cycpLCdtb2RlJyA9PiAnJywnaWQnID0+ICcnKTskeDMwLT5jb2x1bW5fZmllbGRzID0gJHgzODskeDMwLT5zYXZlKCR4MjcpOyR4MzkgPSAkeDMwLT5pZDtpZiAoJHg0NCgkeDIxKSA+IDApIHtmb3JlYWNoICgkeDIxIEFTICR4M2EpIHskeDBkLT5wcXVlcnkoJ3JlcGxhY2UgaW50byB2dGlnZXJfc2VhdHRhY2htZW50c3JlbCB2YWx1ZXMoPyw/KScsIGFycmF5KCR4MzksICR4M2EpKTt9fWlmICgkeDJmICE9ICIiKSB7JHgwZC0+cHF1ZXJ5KCdyZXBsYWNlIGludG8gdnRpZ2VyX3NlYWN0aXZpdHlyZWwgdmFsdWVzKD8sPyknLCBhcnJheSgkeDJmLCR4MzkpKTt9aWYgKCR4MjYgIT0gIiIpICR4MzYgLj0gJHgxNy0+Z2V0VHJhY2tJbWFnZURldGFpbHMoJHgyNiwkeDM5KTskeDNiID0gJHgxYTtpZihpc3NldCgkeDEwKSAmJiAkeDEwIT0nJyl7JHgxYSA9ICR4MTA7fSR4M2MgPSBuZXcgVnRpZ2VyX01haWxlcigpOyR4M2MtPklzSFRNTCh0cnVlKTskeDNjLT5Db25maWdTZW5kZXJJbmZvKCR4MWEsICR4MWIsICR4M2IpOyR4M2MtPlN1YmplY3QgPSAkeDMzOyR4M2MtPkJvZHkgPSAkeDM2OyR4M2MtPmFkZFNpZ25hdHVyZSgkeDI4KTtpZigkeDNjLT5TaWduYXR1cmUgIT0gJycpIHsgJHgzYy0+Qm9keS49ICR4M2MtPlNpZ25hdHVyZTt9JHgzYy0+QWRkQWRkcmVzcygkeDJjKTskeDNjID0gJHgxNy0+YWRkQWxsQXR0YWNobWVudHMoJHgzYywkeDM5KTskeDNkID0gJHgzMlskeDMxXS0+Z2V0RW1haWxJbWFnZXMoKTtpZiAoJHg0NCgkeDNkKSA+IDApIHtmb3JlYWNoICgkeDNkIEFTICR4MzEgPT4gJHgzZSkgeyR4M2MtPkFkZEVtYmVkZGVkSW1hZ2UoJHgzZVsiXDE2MFwxNDF0XDE1MCJdLCAkeDMxLCAkeDNlWyJceDZlYW1lIl0pO319JHgzZiA9IGVtcHR5KCR4MWMpPyBhcnJheSgpIDogJHg0NignLCcsICR4MWMpOyR4NDA9IGVtcHR5KCR4MWQpP2FycmF5KCkgOiAkeDQ2KCcsJywgJHgxZCk7Zm9yZWFjaCgkeDNmIGFzICR4NDEpICR4M2MtPkFkZENDKCR4NDEpO2ZvcmVhY2goJHg0MCBhcyAkeDQyKSR4M2MtPkFkZEJDQygkeDQyKTskeDQzID0gJHgzYy0+U2VuZCh0cnVlKTtpZighZW1wdHkoJHgzOSkpIHskeDMwLT5zZXRFbWFpbEFjY2Vzc0NvdW50VmFsdWUoJHgzOSk7fWlmKCEkeDQzKSB7JHgzMC0+dHJhc2goJHgyNywgJHgzOSk7fX19fSR4MTEtPnJldmVydFVzZXIoKTsgICAgICB9ICAgICBwdWJsaWMgZnVuY3Rpb24gZ2V0Q29udGVudHMoJGVudGl0eSwgJGVudGl0eUNhY2hlPWZhbHNlKXsgICAgICAgICAgICAgICAgICBpZiAoISR0aGlzLT5jb250ZW50cykgeyAgICAgICAgICAgICBnbG9iYWwgJGFkYiwgJGN1cnJlbnRfdXNlcjsgICAgICAgICAgICAgJHRhc2tDb250ZW50cyA9IGFycmF5KCk7ICAgICAgICAgICAgICRlbnRpdHlJZCA9ICRlbnRpdHktPmdldElkKCk7ICAgICAgICAgICAgICAkdXRpbHMgPSBuZXcgVlRXb3JrZmxvd1V0aWxzKCk7ICAgICAgICAgICAgICRhZG1pblVzZXIgPSAkdXRpbHMtPmFkbWluVXNlcigpOyAgICAgICAgICAgICBpZiAoISRlbnRpdHlDYWNoZSl7ICAgICAgICAgICAgICAgICAgICAgJGVudGl0eUNhY2hlID0gbmV3IFZURW50aXR5Q2FjaGUoJGFkbWluVXNlcik7ICAgICAgICAgICAgIH0gICAgICAgICAgICAgICRmcm9tVXNlcklkID0gVXNlcnM6OmdldEFjdGl2ZUFkbWluSWQoKTsgICAgICAgICAgICAgJGVudGl0eU93bmVySWQgPSAkZW50aXR5LT5nZXQoJ2Fzc2lnbmVkX3VzZXJfaWQnKTsgICAgICAgICAgICAgaWYgKCRlbnRpdHlPd25lcklkKSB7ICAgICAgICAgICAgICAgICAgICAgbGlzdCAoJG1vZHVsZUlkLCAkZnJvbVVzZXJJZCkgPSBleHBsb2RlKCd4JywgJGVudGl0eU93bmVySWQpOyAgICAgICAgICAgICB9ICAgICAgICAgICAgICAkb3duZXJFbnRpdHkgPSAkZW50aXR5Q2FjaGUtPmZvcklkKCRlbnRpdHlPd25lcklkKTsgICAgICAgICAgICAgaWYoJG93bmVyRW50aXR5LT5nZXRNb2R1bGVOYW1lKCkgPT09ICdHcm91cHMnKSB7ICAgICAgICAgICAgICAgICBsaXN0KCRtb2R1bGVJZCwgJHJlY29yZElkKSA9IHZ0d3NfZ2V0SWRDb21wb25lbnRzKCRlbnRpdHlJZCk7ICAgICAgICAgICAgICAgICAkZnJvbVVzZXJJZCA9IFZ0aWdlcl9VdGlsX0hlbHBlcjo6Z2V0Q3JlYXRvcigkcmVjb3JkSWQpOyAgICAgICAgICAgICB9ICAgICAgICAgICAgICBpZiAoJHRoaXMtPmZyb21FbWFpbCAmJiAhKCRvd25lckVudGl0eS0+Z2V0TW9kdWxlTmFtZSgpID09PSAnR3JvdXBzJyAmJiBzdHJwb3MoJHRoaXMtPmZyb21FbWFpbCwgJ2Fzc2lnbmVkX3VzZXJfaWQgOiAoVXNlcnMpICcpICE9PSBmYWxzZSkpIHsgICAgICAgICAgICAgICAgICRldCA9IG5ldyBWVEVtYWlsUmVjaXBpZW50c1RlbXBsYXRlKCR0aGlzLT5mcm9tRW1haWwpOyAgICAgICAgICAgICAgICAgJGZyb21FbWFpbERldGFpbHMgPSAkZXQtPnJlbmRlcigkZW50aXR5Q2FjaGUsICRlbnRpdHlJZCk7ICAgICAgICAgICAgICAgICAgJGNvbjEgPSBzdHJwb3MoJGZyb21FbWFpbERldGFpbHMsICcmbHQ7Jyk7ICAgICAgICAgICAgICAgICAkY29uMiA9IHN0cnBvcygkZnJvbUVtYWlsRGV0YWlscywgJyZndDsnKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRjb24xICYmICRjb24yKSB7ICAgICAgICAgICAgICAgICAgICAgICAgIGxpc3QoJGZyb21OYW1lLCAkZnJvbUVtYWlsKSA9IGV4cGxvZGUoJyZsdDsnLCAkZnJvbUVtYWlsRGV0YWlscyk7ICAgICAgICAgICAgICAgICAgICAgbGlzdCgkZnJvbUVtYWlsLCAkcmVzdCkgPSBleHBsb2RlKCcmZ3Q7JywgJGZyb21FbWFpbCk7ICAgICAgICAgICAgICAgICB9IGVsc2UgeyAgICAgICAgICAgICAgICAgICAgICRmcm9tTmFtZSA9ICIiOyAgICAgICAgICAgICAgICAgICAgICRmcm9tRW1haWwgPSAkZnJvbUVtYWlsRGV0YWlsczsgICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgeyAgICAgICAgICAgICAgICAgJHVzZXJPYmogPSBDUk1FbnRpdHk6OmdldEluc3RhbmNlKCdVc2VycycpOyAgICAgICAgICAgICAgICAgJHVzZXJPYmotPnJldHJpZXZlQ3VycmVudFVzZXJJbmZvRnJvbUZpbGUoJGZyb21Vc2VySWQpOyAgICAgICAgICAgICAgICAgaWYgKCR1c2VyT2JqKSB7ICAgICAgICAgICAgICAgICAgICAgICAgICRmcm9tRW1haWwgPSAkdXNlck9iai0+ZW1haWwxOyAgICAgICAgICAgICAgICAgICAgICAgICAkZnJvbU5hbWUgPSAkdXNlck9iai0+dXNlcl9uYW1lOyAgICAgICAgICAgICAgICAgfSBlbHNlIHsgICAgICAgICAgICAgICAgICAgICAgICAgJHJlc3VsdCA9ICRhZGItPnBxdWVyeSgnU0VMRUNUIHVzZXJfbmFtZSwgZW1haWwxIEZST00gdnRpZ2VyX3VzZXJzIFdIRVJFIGlkID0gPycsIGFycmF5KCRmcm9tVXNlcklkKSk7ICAgICAgICAgICAgICAgICAgICAgICAgICRmcm9tRW1haWwgPSAkYWRiLT5xdWVyeV9yZXN1bHQoJHJlc3VsdCwgMCwgJ2VtYWlsMScpOyAgICAgICAgICAgICAgICAgICAgICAgICAkZnJvbU5hbWUgPSAkYWRiLT5xdWVyeV9yZXN1bHQoJHJlc3VsdCwgMCwgJ3VzZXJfbmFtZScpOyAgICAgICAgICAgICAgICAgfSAgICAgICAgICAgICB9ICAgICAgICAgICAgICBpZiAoISRmcm9tRW1haWwpIHsgICAgICAgICAgICAgICAgICR1dGlscy0+cmV2ZXJ0VXNlcigpOyAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOyAgICAgICAgICAgICB9ICAgICAgICAgICAgICAkdGFza0NvbnRlbnRzWydmcm9tRW1haWwnXSA9ICRmcm9tRW1haWw7ICAgICAgICAgICAgICR0YXNrQ29udGVudHNbJ2Zyb21OYW1lJ10gPSAkZnJvbU5hbWU7ICAgICAgICAgICAgICBpZiAoJGVudGl0eS0+Z2V0TW9kdWxlTmFtZSgpID09PSAnRXZlbnRzJykgeyAgICAgICAgICAgICAgICAgJGNvbnRhY3RJZCA9ICRlbnRpdHktPmdldCgnY29udGFjdF9pZCcpOyAgICAgICAgICAgICAgICAgaWYgKCRjb250YWN0SWQpIHsgICAgICAgICAgICAgICAgICAgICAkY29udGFjdElkcyA9ICcnOyAgICAgICAgICAgICAgICAgICAgIGxpc3QoJHdzSWQsICRyZWNvcmRJZCkgPSBleHBsb2RlKCd4JywgJGVudGl0eUlkKTsgICAgICAgICAgICAgICAgICAgICAkd2Vic2VydmljZU9iamVjdCA9IFZ0aWdlcldlYnNlcnZpY2VPYmplY3Q6OmZyb21OYW1lKCRhZGIsICdDb250YWN0cycpOyAgICAgICAgICAgICAgICAgICAgICAkcmVzdWx0ID0gJGFkYi0+cHF1ZXJ5KCdTRUxFQ1QgY29udGFjdGlkIEZST00gdnRpZ2VyX2NudGFjdGl2aXR5cmVsIFdIRVJFIGFjdGl2aXR5aWQgPSA/JywgYXJyYXkoJHJlY29yZElkKSk7ICAgICAgICAgICAgICAgICAgICAgJG51bU9mUm93cyA9ICRhZGItPm51bV9yb3dzKCRyZXN1bHQpOyAgICAgICAgICAgICAgICAgICAgIGZvcigkaT0wOyAkaTwkbnVtT2ZSb3dzOyAkaSsrKSB7ICAgICAgICAgICAgICAgICAgICAgICAgICRjb250YWN0SWRzIC49IHZ0d3NfZ2V0SWQoJHdlYnNlcnZpY2VPYmplY3QtPmdldEVudGl0eUlkKCksICRhZGItPnF1ZXJ5X3Jlc3VsdCgkcmVzdWx0LCAkaSwgJ2NvbnRhY3RpZCcpKS4nLCc7ICAgICAgICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICAgJGVudGl0eS0+c2V0KCdjb250YWN0X2lkJywgdHJpbSgkY29udGFjdElkcywgJywnKSk7ICAgICAgICAgICAgICAgICAkZW50aXR5Q2FjaGUtPmNhY2hlWyRlbnRpdHlJZF0gPSAkZW50aXR5OyAgICAgICAgICAgICB9ICAgICAgICAgICAgICAkZXQgPSBuZXcgVlRFbWFpbFJlY2lwaWVudHNUZW1wbGF0ZSgkdGhpcy0+cmVjZXBpZW50KTsgICAgICAgICAgICAgJHRvRW1haWwgPSAkZXQtPnJlbmRlcigkZW50aXR5Q2FjaGUsICRlbnRpdHlJZCk7ICAgICAgICAgICAgICAkdG9FbWFpbHMgPSAkdGhpcy0+Z2V0UmVjaXBpZW50RW1haWxzKCRlbnRpdHlDYWNoZSwgJGVudGl0eUlkLCAkdGhpcy0+cmVjZXBpZW50KTsgICAgICAgICAgICAgICAgICAgICAgICAgICRlY2N0ID0gbmV3IFZURW1haWxSZWNpcGllbnRzVGVtcGxhdGUoJHRoaXMtPmVtYWlsY2MpOyAgICAgICAgICAgICAkY2NFbWFpbCA9ICRlY2N0LT5yZW5kZXIoJGVudGl0eUNhY2hlLCAkZW50aXR5SWQpOyAgICAgICAgICAgICAgJGViY2N0ID0gbmV3IFZURW1haWxSZWNpcGllbnRzVGVtcGxhdGUoJHRoaXMtPmVtYWlsYmNjKTsgICAgICAgICAgICAgJGJjY0VtYWlsID0gJGViY2N0LT5yZW5kZXIoJGVudGl0eUNhY2hlLCAkZW50aXR5SWQpOyAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoc3RybGVuKHRyaW0oJHRvRW1haWwsICIgXHRcbiwiKSkgPT0gMCAmJiBzdHJsZW4odHJpbSgkY2NFbWFpbCwgIiBcdFxuLCIpKSA9PSAwICYmIHN0cmxlbih0cmltKCRiY2NFbWFpbCwgIiBcdFxuLCIpKSA9PSAwKSB7ICAgICAgICAgICAgICAgICAkdXRpbHMtPnJldmVydFVzZXIoKTsgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsgICAgICAgICAgICAgfSAgICAgICAgICAgICAkdGFza0NvbnRlbnRzWyd0b0VtYWlsJ10gPSAkdG9FbWFpbDsgICAgICAgICAgICAgJHRhc2tDb250ZW50c1sndG9FbWFpbHMnXSA9ICR0b0VtYWlsczsgICAgICAgICAgICAgJHRhc2tDb250ZW50c1snY2NFbWFpbCddID0gJGNjRW1haWw7ICAgICAgICAgICAgICR0YXNrQ29udGVudHNbJ2JjY0VtYWlsJ10gPSAkYmNjRW1haWw7ICAgICAgICAgICAgICAkdGVtcGxhdGVpZCA9ICR0aGlzLT50ZW1wbGF0ZTsgICAgICAgICAgICAgJGxhbmd1YWdlID0gJHRoaXMtPnRlbXBsYXRlX2xhbmd1YWdlOyAgICAgICAgICAgICAgICAgICAgICAgICAgJEVNQUlMTWFrZXIgPSBuZXcgRU1BSUxNYWtlcl9FTUFJTE1ha2VyX01vZGVsKCk7ICAgICAgICAgICAgICRlbWFpbHRlbXBsYXRlUmVzdWx0ID0gJEVNQUlMTWFrZXItPkdldERldGFpbFZpZXdEYXRhKCR0ZW1wbGF0ZWlkLCB0cnVlKTsgICAgICAgICAgICAgICAgICAgICAgICAgJHRhc2tDb250ZW50c1snc3ViamVjdCddID0gJGVtYWlsdGVtcGxhdGVSZXN1bHRbInN1YmplY3QiXTsgICAgICAgICAgICAgJHRhc2tDb250ZW50c1snYm9keSddID0gZGVjb2RlX2h0bWwoJGVtYWlsdGVtcGxhdGVSZXN1bHRbImJvZHkiXSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAkQXR0YWNobWVudHMgPSAkRU1BSUxNYWtlci0+R2V0QXR0YWNobWVudHNEYXRhKCR0ZW1wbGF0ZWlkKTsgICAgICAgICAgICAgJHRhc2tDb250ZW50c1snYXR0YWNobWVudHMnXSA9ICRBdHRhY2htZW50czsgICAgICAgICAgICAgJHRhc2tDb250ZW50c1snbGFuZ3VhZ2UnXSA9ICRsYW5ndWFnZTsgICAgICAgICAgICAgICRsdXNlcmlkID0gIiI7ICAgICAgICAgICAgIGlmIChpc3NldCgkX1NFU1NJT05bJ2F1dGhlbnRpY2F0ZWRfdXNlcl9pZCddKSkgeyAgICAgICAgICAgICAgICAgJGx1c2VyaWQgPSAkX1NFU1NJT05bJ2F1dGhlbnRpY2F0ZWRfdXNlcl9pZCddOyAgICAgICAgICAgICB9ICAgICAgICAgICAgICR0YXNrQ29udGVudHNbJ2x1c2VyaWQnXSA9ICRsdXNlcmlkOyAgICAgICAgICAgICAgICAgICAgICAgICAgJG1vZGlmaWVkYnlJZCA9ICRlbnRpdHktPmdldCgnbW9kaWZpZWRieScpOyAgICAgICAgICAgICBsaXN0ICgkbW9kdWxlTXVzZXJJZCwgJG11c2VyaWQpID0gZXhwbG9kZSgneCcsICRtb2RpZmllZGJ5SWQpOyAgICAgICAgICAgICAkdGFza0NvbnRlbnRzWydtdXNlcmlkJ10gPSAkbXVzZXJpZDsgICAgICAgICAgICAgICAgICAgICAgICAgICR0aGlzLT5jb250ZW50cyA9ICR0YXNrQ29udGVudHM7ICAgICAgICAgICAgICR1dGlscy0+cmV2ZXJ0VXNlcigpOyAgICAgICAgIH0gICAgICAgICBpZihpc19hcnJheSgkdGhpcy0+Y29udGVudHMpKSB7ICAgICAgICAgICAgICAgICAgICAgJHRoaXMtPmNvbnRlbnRzID0gWmVuZF9Kc29uOjplbmNvZGUoJHRoaXMtPmNvbnRlbnRzKTsgICAgICAgICB9ICAgICAgICAgcmV0dXJuICR0aGlzLT5jb250ZW50czsgICAgIH0gICAgICAgICAgICAgcHVibGljIGZ1bmN0aW9uIGdldFRlbXBsYXRlcygkc2VsZWN0ZWRfbW9kdWxlKSB7ICAgICAgICAgICAgICAgICAkb3JkZXJieSA9ICJ0ZW1wbGF0ZWlkIjsgICAgICAgICAkZGlyID0gImFzYyI7ICAgICAgICAgJGMgPSAiPGRpdiBjbGFzcz0ncm93LWZsdWlkJz4iOyAgICAgICAgICAgICAgICAgICRFTUFJTE1ha2VyID0gbmV3IEVNQUlMTWFrZXJfRU1BSUxNYWtlcl9Nb2RlbCgpOyAgICAgICAgICAgICAgICAgICRyZXF1ZXN0ID0gbmV3IFZ0aWdlcl9SZXF1ZXN0KCRfUkVRVUVTVCwgJF9SRVFVRVNUKTsgICAgICAgICAkdGVtcGxhdGVzX2RhdGEgPSAkRU1BSUxNYWtlci0+R2V0TGlzdHZpZXdEYXRhKCRvcmRlcmJ5LCAkZGlyLCAkc2VsZWN0ZWRfbW9kdWxlLGZhbHNlLCRyZXF1ZXN0KTsgICAgICAgICAgICAgICAgICBmb3JlYWNoICgkdGVtcGxhdGVzX2RhdGEgQVMgJHRkYXRhKSB7ICAgICAgICAgICAgICAgICAgICAgICAgICAkdGVtcGxhdGVpZCA9ICR0ZGF0YVsidGVtcGxhdGVpZCJdOyAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFlbXB0eSgkdGRhdGFbImNhdGVnb3J5Il0pIHx8IGlzc2V0KCRmaWVsZHZhbHVlWyR0ZW1wbGF0ZWlkXSkpIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkZmllbGR2YWx1ZVskdGRhdGFbImNhdGVnb3J5Il1dWyR0ZW1wbGF0ZWlkXSA9ICR0ZGF0YVsibmFtZSJdOyAgICAgICAgICAgICB9IGVsc2UgeyAgICAgICAgICAgICAgICAgJGZpZWxkdmFsdWVbJHRlbXBsYXRlaWRdID0gJHRkYXRhWyJuYW1lIl07ICAgICAgICAgICAgIH0gICAgICAgICB9ICAgICAgICAgIHJldHVybiAkZmllbGR2YWx1ZTsgICAgIH0gICAgICAgICAgcHVibGljIGZ1bmN0aW9uIGdldExhbmd1YWdlcygpIHsgICAgICAgICAgICAgICAgICAkbGFuZ3ZhbHVlID0gYXJyYXkoKTsgICAgICAgICAkY3VycmxhbmcgPSBhcnJheSgpOyAgICAgICAgICAgICAgICAgICRhZGIgPSBQZWFyRGF0YWJhc2U6OmdldEluc3RhbmNlKCk7ICAgICAgICAgJHRlbXBfcmVzID0gJGFkYi0+cHF1ZXJ5KCJTRUxFQ1QgbGFiZWwsIHByZWZpeCBGUk9NIHZ0aWdlcl9sYW5ndWFnZSBXSEVSRSBhY3RpdmUgPSA/IixhcnJheSgnMScpKTsgICAgICAgICAgd2hpbGUgKCR0ZW1wX3JvdyA9ICRhZGItPmZldGNoQnlBc3NvYygkdGVtcF9yZXMpKSB7ICAgICAgICAgICAgICR0ZW1wbGF0ZV9sYW5ndWFnZXNbJHRlbXBfcm93WyJwcmVmaXgiXV0gPSAkdGVtcF9yb3dbImxhYmVsIl07ICAgICAgICAgICAgICBpZigkdGVtcF9yb3dbInByZWZpeCJdID09ICRjdXJyZW50X2xhbmd1YWdlKSAgICAgICAgICAgICAgICAgJGN1cnJsYW5nWyR0ZW1wX3Jvd1sicHJlZml4Il1dID0gJHRlbXBfcm93WyJsYWJlbCJdOyAgICAgICAgICAgICBlbHNlICAgICAgICAgICAgICAgICAkbGFuZ3ZhbHVlWyR0ZW1wX3Jvd1sicHJlZml4Il1dID0gJHRlbXBfcm93WyJsYWJlbCJdOyAgICAgICAgIH0gICAgICAgICAkbGFuZ3ZhbHVlID0gKGFycmF5KSAkY3VycmxhbmcgKyAoYXJyYXkpICRsYW5ndmFsdWU7ICAgICAgICAgICAgICAgICAgcmV0dXJuICRsYW5ndmFsdWU7ICAgICB9ICAgICAgICAgIGZ1bmN0aW9uIGdldFJlY2lwaWVudEVtYWlscygkZW50aXR5Q2FjaGUsICRlbnRpdHlJZCwgJHRvX2VtYWlscyl7ICAgICAgICAgICAgICR0aGlzLT5jYWNoZSA9ICRlbnRpdHlDYWNoZTsgICAgICAgICAgICAgJHRoaXMtPnBhcmVudCA9ICR0aGlzLT5jYWNoZS0+Zm9ySWQoJGVudGl0eUlkKTsgICAgICAgICAgICAgICRSZWNpcGllbnRzID0gYXJyYXkoKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJEVtYWlscyA9IGV4cGxvZGUoIiwiLCR0b19lbWFpbHMpOyAgICAgICAgICAgICAgZm9yZWFjaCAoJEVtYWlscyBBUyAkZW1haWwpIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRlbWFpbCAhPSAiIikgeyAgICAgICAgICAgICAgICAgICAgICRSZWNpcGllbnRzX2RhdGEgPSAkdGhpcy0+cGFyc2VFbWFpbCgkZW1haWwsICRlbnRpdHlDYWNoZSwgJGVudGl0eUlkKTsgICAgICAgICAgICAgICAgICAgICBpZiAoJFJlY2lwaWVudHNfZGF0YSkgJFJlY2lwaWVudHMgPSBhcnJheV9tZXJnZSgkUmVjaXBpZW50c19kYXRhLCAkUmVjaXBpZW50cyk7ICAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgICByZXR1cm4gJFJlY2lwaWVudHM7ICAgICB9ICAgICAgcHJpdmF0ZSBmdW5jdGlvbiBwYXJzZUVtYWlsKCR0b19lbWFpbCwgJGVudGl0eUNhY2hlLCAkZW50aXR5SWQpeyAgICAgICAgIHByZWdfbWF0Y2goJy9cKChcdyspIDogXCgoW19cd10rKVwpIChcdyspXCkvJywgJHRvX2VtYWlsLCAkbWF0Y2hlcyk7ICAgICAgICAgIGlmKGNvdW50KCRtYXRjaGVzKT09MCl7ICAgICAgICAgICAgICR0b19lbWFpbF9tb2R1bGUgPSAiIjsgICAgICAgICAgICAgJHRvX2VtYWlsX2lkID0gIiI7ICAgICAgICAgICAgICRkYXRhID0gJHRoaXMtPnBhcmVudC0+Z2V0RGF0YSgpOyAgICAgICAgICAgICAgaWYgKHN1YnN0cigkdG9fZW1haWwsIDAsIDEpID09ICckJykgeyAgICAgICAgICAgICAgICAgICAgICAkZmlsZW5hbWUgPSBzdWJzdHIoJHRvX2VtYWlsLCAxKTsgICAgICAgICAgICAgICAgICAgICAgaWYoaXNzZXQoJGRhdGFbJGZpbGVuYW1lXSkpIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZigkdGhpcy0+dXNlVmFsdWUoJGRhdGEsICRmaWxlbmFtZSkpeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdG9fZW1haWxfaWQgPSAkdGhpcy0+cGFyZW50LT5nZXRJZCgpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHRvX2VtYWlsX21vZHVsZSA9ICR0aGlzLT5wYXJlbnQtPmdldE1vZHVsZU5hbWUoKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR0b19lbWFpbCA9ICRkYXRhWyRmaWxlbmFtZV07ICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRldCA9IG5ldyBWVEVtYWlsUmVjaXBpZW50c1RlbXBsYXRlKCR0b19lbWFpbCk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobWV0aG9kX2V4aXN0cygkZXQsJ3JlbmRlckFycmF5JykpIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkZXQtPnJlbmRlckFycmF5KCRlbnRpdHlDYWNoZSwgJGVudGl0eUlkKTsgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR0b19lbWFpbCA9ICRldC0+cmVuZGVyKCRlbnRpdHlDYWNoZSwgJGVudGl0eUlkKTsgICAgICAgICAgICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgfSAgICAgICAgICAgICAgcmV0dXJuIGFycmF5KGFycmF5KCJpZCIgPT4gJHRvX2VtYWlsX2lkLCAibW9kdWxlIiA9PiAkdG9fZW1haWxfbW9kdWxlLCAiZW1haWwiID0+ICR0b19lbWFpbCkpOyAgICAgICAgIH1lbHNleyAgICAgICAgICAgICBsaXN0KCRmdWxsLCAkcmVmZXJlbmNlRmllbGQsICRyZWZlcmVuY2VNb2R1bGUsICRmaWVsZG5hbWUpID0gJG1hdGNoZXM7ICAgICAgICAgICAgICAkcmVmZXJlbmNlSWQgPSAkdGhpcy0+cGFyZW50LT5nZXQoJHJlZmVyZW5jZUZpZWxkKTsgICAgICAgICAgICAgaWYoJHJlZmVyZW5jZUlkPT1udWxsKXsgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7ICAgICAgICAgICAgIH1lbHNleyAgICAgICAgICAgICAgICAgICAgIGlmICgkcmVmZXJlbmNlRmllbGQgPT09ICdjb250YWN0X2lkJykgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHJlZmVyZW5jZUlkc0xpc3QgPSBleHBsb2RlKCcsJywgJHJlZmVyZW5jZUlkKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRwYXJ0cyA9IGFycmF5KCk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JlYWNoICgkcmVmZXJlbmNlSWRzTGlzdCBhcyAkcmVmZXJlbmNlSWQpIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGVudGl0eSA9ICR0aGlzLT5jYWNoZS0+Zm9ySWQoJHJlZmVyZW5jZUlkKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHRvX2VtYWlsX21vZHVsZSA9ICRlbnRpdHktPmdldE1vZHVsZU5hbWUoKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRkYXRhID0gJGVudGl0eS0+Z2V0RGF0YSgpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZigkdGhpcy0+dXNlVmFsdWUoJGRhdGEsICRmaWVsZG5hbWUpKSB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRwYXJ0c1tdID0gYXJyYXkoImlkIiA9PiAkcmVmZXJlbmNlSWQsICJtb2R1bGUiID0+ICR0b19lbWFpbF9tb2R1bGUsICJlbWFpbCIgPT4gJGRhdGFbJGZpZWxkbmFtZV0pOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHBhcnRzOyAgICAgICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgICAgICAgJGVudGl0eSA9ICR0aGlzLT5jYWNoZS0+Zm9ySWQoJHJlZmVyZW5jZUlkKTsgICAgICAgICAgICAgICAgICAgICBpZigkcmVmZXJlbmNlTW9kdWxlPT09IlVzZXJzIiAmJiAkZW50aXR5LT5nZXRNb2R1bGVOYW1lKCk9PSJHcm91cHMiKXsgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpc3QoJGdyb3VwRW50aXR5SWQsICRncm91cElkKSA9IHZ0d3NfZ2V0SWRDb21wb25lbnRzKCRyZWZlcmVuY2VJZCk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWlyZV9vbmNlKCdpbmNsdWRlL3V0aWxzL0dldEdyb3VwVXNlcnMucGhwJyk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkZ2d1ID0gbmV3IEdldEdyb3VwVXNlcnMoKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRnZ3UtPmdldEFsbFVzZXJzSW5Hcm91cCgkZ3JvdXBJZCk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHVzZXJzID0gJGdndS0+Z3JvdXBfdXNlcnM7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcGFydHMgPSBBcnJheSgpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yZWFjaCgkdXNlcnMgYXMgJHVzZXJJZCl7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRyZWZJZCA9IHZ0d3NfZ2V0V2Vic2VydmljZUVudGl0eUlkKCJVc2VycyIsICR1c2VySWQpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkZW50aXR5ID0gJHRoaXMtPmNhY2hlLT5mb3JJZCgkcmVmSWQpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkZGF0YSA9ICRlbnRpdHktPmdldERhdGEoKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoJHRoaXMtPnVzZVZhbHVlKCRkYXRhLCAkZmllbGRuYW1lKSl7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHBhcnRzW10gPSBhcnJheSgiaWQiID0+ICR1c2VySWQsICJtb2R1bGUiID0+ICJVc2VycyIsICAiZW1haWwiID0+ICRkYXRhWyRmaWVsZG5hbWVdKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRwYXJ0czsgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlaWYoJGVudGl0eS0+Z2V0TW9kdWxlTmFtZSgpPT09JHJlZmVyZW5jZU1vZHVsZSl7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkZGF0YSA9ICRlbnRpdHktPmdldERhdGEoKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoJHRoaXMtPnVzZVZhbHVlKCRkYXRhLCAkZmllbGRuYW1lKSl7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhcnJheShhcnJheSgiaWQiID0+ICRyZWZlcmVuY2VJZCwgIm1vZHVsZSIgPT4gJHJlZmVyZW5jZU1vZHVsZSwgImVtYWlsIiA9PiAkZGF0YVskZmllbGRuYW1lXSkpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfWVsc2V7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgfSAgICAgICAgIH0gICAgICAgICByZXR1cm4gZmFsc2U7ICAgICB9ICAgICAgICAgcHJvdGVjdGVkIGZ1bmN0aW9uIHVzZVZhbHVlKCRkYXRhLCAkZmllbGRuYW1lKSB7ICAgICAgICAgcmV0dXJuICFlbXB0eSgkZGF0YVskZmllbGRuYW1lXSkgJiYgJGRhdGFbJ2VtYWlsb3B0b3V0J10gPT0gMDsgICAgIH0gfSA/Pg==').'<?php '); ?>